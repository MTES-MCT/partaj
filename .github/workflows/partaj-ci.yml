name: Partaj CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DJANGO_CONFIGURATION: "Test"
  DJANGO_PARTAJ_PRIMARY_LOCATION: "https://partaj"
  DJANGO_SECRET_KEY: "TestSecretKey"
  DJANGO_SETTINGS_MODULE: "partaj.settings"
  DJANGO_SUPERUSER_USERNAME: "admin"
  DJANGO_SUPERUSER_EMAIL: "admin@example.com"
  DJANGO_SUPERUSER_PASSWORD: "admin"

jobs:
  ################
  # BACKEND JOBS #
  ################
  lint-back-black:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/backend
    container: python:3.7-stretch
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install system dependencies
      run: apt-get update && apt-get install -y gettext
    - name: Install python dependencies
      run: pip install .[dev]
    - name: Run black in check mode
      run: black --check partaj
  lint-back-flake8:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/backend
    container: python:3.7-stretch
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install system dependencies
      run: apt-get update && apt-get install -y gettext
    - name: Install python dependencies
      run: pip install .[dev]
    - name: Run flake8
      run: flake8
  lint-back-pylint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/backend
    container: python:3.7-stretch
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install system dependencies
      run: apt-get update && apt-get install -y gettext
    - name: Install python dependencies
      run: pip install .[dev]
    - name: Run pylint
      run: pylint --rcfile=.pylintrc partaj
  lint-back-isort:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/backend
    container: python:3.7-stretch
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install system dependencies
      run: apt-get update && apt-get install -y gettext
    - name: Install python dependencies
      run: pip install .[dev]
    - name: Run isort in check mode
      run: isort --check-only partaj
  test-back:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/backend
    container: python:3.7-stretch
    services:
      postgres:
        image: postgres:12.1
        env:
          POSTGRES_DB: partaj
          POSTGRES_PASSWORD: admin
          POSTGRES_USER: admin
        ports:
            - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install system dependencies
      run: apt-get update && apt-get install -y gettext
    - name: Install python dependencies
      run: pip install .[dev]
    - name: Get translations
      run: python manage.py compilemessages
    - name: Run our test suite
      run: pytest
      env:
        POSTGRES_HOST: postgres

  #################
  # FRONTEND JOBS #
  #################
  build-front:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/frontend
    container: node:latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    ### CACHE ###
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: Restore yarn cache
      uses: actions/cache@v1
      id: yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn
    ### END CACHE ###
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    - name: Build with Typescript
      run: yarn build
  lint-front-prettier:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/frontend
    container: node:latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    ### CACHE ###
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: Restore yarn cache
      uses: actions/cache@v1
      id: yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    ### END CACHE ###
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    - name: Run prettier as a linter
      run: yarn prettier --list-different "js/**/*.+(ts|tsx|json|js|jsx)" "*.+(ts|tsx|json|js|jsx)"
  test-front:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/frontend
    container: node:latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    ### CACHE ###
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: Restore yarn cache
      uses: actions/cache@v1
      id: yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    ### END CACHE ###
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    - name: Run tests
      run: yarn test
